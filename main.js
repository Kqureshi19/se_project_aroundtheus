!function(){"use strict";class e{constructor(e,t,s,o,r){let{name:n,link:i,_id:l,isLiked:a}=e;this._name=n,this._link=i,this._id=l,this._isLiked=a,this._cardSelector=t,this._handleImageClick=s,this._handleCardDeleteClick=o,this._handleCardLike=r}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{console.log(this._handleCardLike),this._handleCardLike(this)})),this._cardElement.querySelector(".card__trash-button").addEventListener("click",(()=>{this._handleCardDeleteClick(this)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}changeLikeButtonState(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}setIsLiked(e){this._isLiked=e,this.changeLikeButtonState()}handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}_getElement(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._cardElement=this._getElement(),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__title"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this.changeLikeButtonState(),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this._setEventListeners(),this._cardElement}}var t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._submitButton=t.querySelector(e.submitButtonSelector),console.log("formElement is: ",this._form)}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hasInvalidInput(){return!this._inputElements.every((e=>e.validity.valid))}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}resetForm(){this._form.reset(),this._disableButton()}_toggleButtonState(){this._hasInvalidInput(this._inputElements)?this._disableButton():this._enableButton()}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_setEventListeners(){this._inputElements=Array.from(this._form.querySelectorAll(this._inputSelector)),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};class s{constructor(e){let{popupSelector:t}=e;console.log(t),this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close"))&&this.close()}))}}class o extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._submitButton=this._popupForm.querySelector(".modal__save-button")}close(){this._popupForm.reset(),super.close()}_getInputValues(){const e={};return this._inputValues=this._popupForm.querySelectorAll(".modal__input"),this._inputValues.forEach((t=>{e[t.name]=t.value})),e}setLoading(e){this._submitButton.textContent=e?"Saving...":"Save"}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}class r{constructor(e,t){let{items:s,renderer:o}=e;this._items=s,this._renderer=o,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const n={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},i=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._handleResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._handleResponse)}updateUserInfo(e){let{name:t,about:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._handleResponse)}addCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._handleResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._handleResponse)}setUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._handleResponse)}setLiked(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._handleResponse)}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._handleResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"7d078757-23ed-414e-a9d7-d63a6269c72c","Content-Type":"application/json"}});i.getUserInfo().then((e=>{console.log("res:",e),console.log("res.name: ",e.name),console.log("res.about: ",e.about),C.setUserAvatar(e.avatar),C.setUserInfo(e.name,e.about)})).catch((e=>{console.error(e),alert(`${e}`)})),document.querySelector("#card-template").content.firstElementChild;const l=document.querySelector("#profile-edit-button"),a=document.querySelector("#profile-edit-modal"),c=document.querySelector("#add-card-modal"),d=document.querySelector("#preview-card-modal"),h=(document.querySelector(".modal__preview-image"),a.querySelector("#profile-edit-modal-close-button"),c.querySelector("#add-card-modal-close-button")),u=d.querySelector("#preview-card-modal-close-button"),_=document.querySelector(".profile__add-button"),m=(document.querySelector(".profile__title"),document.querySelector(".profile__description"),document.querySelector("#profile-title-input")),p=document.querySelector("#profile-description-input"),v=document.forms["profile-edit-form"],E=document.forms["add-card-form"],f=document.forms["avatar-edit-form"];console.log(f),document.querySelector(".cards__list"),E.querySelector(".modal__input_type_title"),E.querySelector(".modal__input_type_link"),new t(n,v).enableValidation();const g=new t(n,E);function L(t){return new e(t,"#card-template",y,B,w).getView()}g.enableValidation(),new t(n,f).enableValidation();const S=new o("#add-card-modal",(function(e){console.log(3333333,e),S.setLoading(!0),i.addCard(e).then((e=>{const t=L(e);I.addItem(t),S.close()})).catch((e=>{console.error(e),alert(`${e}`)})).finally((()=>{S.setLoading(!1)}))}));S.setEventListeners();const k=new o("#profile-edit-modal",(function(e){k.setLoading(!0),console.log("inputValues:",e),i.updateUserInfo(e).then((e=>{C.setUserInfo(e.name,e.about),k.close()})).catch((e=>{console.error(e),alert(`${e}`)})).finally((()=>{k.setLoading(!1)}))}));k.setEventListeners();const b=new class extends s{constructor(e){super({popupSelector:e}),console.log("PopupSelector is: ",e),this._cardImageElement=this._popupElement.querySelector(".modal__preview-image"),this._modalCaption=this._popupElement.querySelector(".modal__caption")}open(e){console.log("modal Caption"),this._cardImageElement.src=e.link,this._cardImageElement.alt=e.name,this._modalCaption.textContent=e.name,console.log(this._modalCaption.textContent),console.log("the alt text is:",this._cardImageElement.alt),super.open()}}("#preview-card-modal");function y(e){b.open(e)}b.setEventListeners();const C=new class{constructor(e,t,s){this._profileNameElement=document.querySelector(e),this._profileDescriptionElement=document.querySelector(t),this._avatar=document.querySelector(s)}getUserInfo(){return{name:this._profileNameElement.textContent,description:this._profileDescriptionElement.textContent}}setUserInfo(e,t){this._profileNameElement.textContent=e,this._profileDescriptionElement.textContent=t}setUserAvatar(e){this._avatar.src=e}}(".profile__title",".profile__description",".profile__image");let I;l.addEventListener("click",(()=>{!function(){const e=C.getUserInfo();console.log("profileTitleInput.value:"+m.value),m.value=e.name,p.value=e.description,console.log("profileTitleInput.value: "+m.value)}(),k.open()})),_.addEventListener("click",(()=>{g.resetForm(),S.open()})),h.addEventListener("click",(()=>S.close())),u.addEventListener("click",(()=>b.close())),i.getInitialCards().then((e=>{I=new r({items:e,renderer:e=>{I.addItem(L(e))}},".cards__list"),I.renderItems()})).catch((e=>{console.error(e),alert(`${e}`)}));const q=new class extends s{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupForm.querySelector(".modal__save-button")}setSubmitAction(e){this._handleFormSubmit=e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}setLoading(e){this._submitButton.textContent=e?"Deleting...":"Yes"}}("#delete-confirmation-modal");function B(e){q.open(),q.setSubmitAction((()=>{q.setLoading(!0),i.deleteCard(e._id).then((()=>{e.handleDeleteCard(),q.close()})).catch((e=>{console.error(e),alert(`${e}`)})).finally((()=>{q.setLoading(!1)}))}))}q.setEventListeners(),document.querySelector(".editicon").addEventListener("click",(()=>{console.log("you clicked on editAvatarButton"),U.open()}));const U=new o("#edit-avatar-modal",(function(e){U.setLoading(!0),i.setUserAvatar(e.url).then((t=>{console.log("res:",t),console.log("_getInputValues.url:",e.url),C.setUserAvatar(e.url),U.close()})).catch((e=>{console.error(e),alert(`${e}`)})).finally((()=>{U.setLoading(!1)}))}));function w(e){console.log("testing Like 123!"),console.log("this:",this),console.log("card is liked:",e._isLiked),console.log("card is unliked:",!e._isLiked),console.log("this._name:",this._name,"this._isLiked:",this._isLiked),e._isLiked?i.removeLike(e._id).then((t=>{console.log("res",t),console.log("res.isLiked:",t.isLiked),e.setIsLiked(t.isLiked)})).catch((e=>{console.error(e),alert(`${e}`)})):i.setLiked(e._id).then((t=>{console.log("res:",t),console.log("res.isLiked:",t.isLiked),e.setIsLiked(t.isLiked)})).catch((e=>{console.error(e),alert(`${e}`)}))}U.setEventListeners(),console.log("testing98")}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,